#!/bin/bash

##############################################
# GCP-SYS-WORKFLOWS Service Monitoring Script
##############################################

# Set Vars
recipients="dg.gcp_em_team@bofa.com"
directory="/gcp/autosys/autosys_out"
log_lines="{{ log_count }}"
sleep_secs="{{ sleep_secs }}"
export smtp="{{ smtp_name }}"
export smtpport=25
boxname=$(hostname)
ice_bool="{{ ice_bool }}"

deployment_lock="/path/to/deployment.lock"
startup_lock="/apps/gcp_sys_workflows/latest/logs/gcp_sys_workflows-startup.lock"

log_info="$directory/wf-restart-$(date +%Y-%m-%d_%H:%M:%S).log"

send_mail() {
  local subject="$1"
  local body="$2"
  echo -e "$body" | mail -s "$subject" -r "{{ service_id }}@bofa.com" $recipients
}

if [ "$ice_bool" = "NO" ]; then
  # Set Environment lanes
  for env in {{ gra_env_lanes }}; do
    # Check to see if lanes are down
    send_mail="false"
    check_gcp_workflows1=$(ps -ef | grep -i uwsgi | grep $env | egrep 'master|Emperor|worker' | egrep -v worker | egrep -v start | wc -l)
    if [ $check_gcp_workflows1 -lt 2 ]; then
      # Log current status
      echo "[$(date)] Detected potential issue with $env: $check_gcp_workflows1 processes found." >> $log_info
      # Check to see if lane is down for at least 60 seconds
      sleep $sleep_secs
      check_gcp_workflows2=$(ps -ef | grep -i uwsgi | grep $env | egrep 'master|Emperor|worker' | egrep -v worker | egrep -v start | wc -l)
      if [ $check_gcp_workflows2 -lt 2 ]; then
        # Log current status
        echo "[$(date)] Confirmed issue with $env: $check_gcp_workflows2 processes found after $sleep_secs seconds." >> $log_info
        if [[ ! -f $deployment_lock && ! -f $startup_lock ]]; then
          # Perform restart
          echo "[$(date)] No deployment or startup lock found. Restarting $env." >> $log_info
          cd /gcp/bin
          ./start-gcp-sys-workflows.sh --env=$env
          send_mail="true"
        else
          echo "[$(date)] Deployment or startup in progress. Exiting to avoid conflict." >> $log_info
        fi
      else
        echo "[$(date)] Issue with $env resolved itself: $check_gcp_workflows2 processes found after $sleep_secs seconds." >> $log_info
      fi
    fi

    if [ "$send_mail" = "true" ]; then
      # Check if directory exists
      if [ ! -d "$directory" ]; then
        mkdir -p "$directory"
      fi

      # Add log details to email
      echo -e "Workflows might be down, AutoSys is attempting a restart\n" >> $log_info
      tail -n $log_lines /gcp/$env/apps/gcp_sys_workflows/latest/logs/gcp_sys_workflows-$(date +%Y-%m-%d).log >> $log_info
      email_subject="GCP EM STATUS REPORT -- WF RESTART FOR $env ON $boxname"
      email_body="Dear Team,

We've identified and resolved an issue affecting the uWSGI service startup due to conflicts with Autosys job restarts.

Root Cause:
The uWSGI boot-up process takes longer because it loads database configurations, retrieves secrets from HashiCorp Vault (HVault), and authenticates with OAuth. During this time, the uWSGI Emperor is responsible for launching the master and worker processes.

While the application was loading, the Autosys job attempted to restart the service, causing duplicate PIDs to bind to the same port and removing the socket file. This led to the service becoming unresponsive despite active PIDs.

Resolution:
1. Deployment and Startup Lock Files:
   - Introduced lock files to prevent duplicate startups during deployment and restarts.

2. Enhanced Watchdog Script:
   - Modified the script to check for lock files before restarting.
   - Added a wait mechanism in the startup script to handle delays.

These changes ensure a stable uWSGI startup process and prevent conflicts.

Feel free to reach out with any questions.

Best Regards,
[Your Position]

Log details:
$(cat $log_info)"

      send_mail "$email_subject" "$email_body"
      rm $log_info
    fi

  done
else
  echo "JOB ON ICE"
fi
