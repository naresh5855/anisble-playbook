import os
import requests
import json

class HVaultClient:
    def __init__(self, config_file_path):
        self.config = self._load_config(config_file_path)
        self.client = self._create_client()

    def _load_config(self, config_file_path):
        with open(config_file_path, 'r') as file:
            config = {}
            for line in file:
                if '=' in line:
                    key, value = line.strip().split('=', 1)
                    config[key.strip()] = value.strip()
        return config

    def _create_client(self):
        return {
            'url': self.config['vault_url'],
            'namespace': self.config['vault_namespace']
        }

    def _send_request(self, endpoint, payload, error_msg):
        url = f"{self.client['url']}/v1/auth/{endpoint}"
        headers = {'X-Vault-Namespace': self.client['namespace']}
        response = requests.post(url, json=payload, headers=headers)

        if response.status_code != 200:
            raise Exception(f"{error_msg}. Status code: {response.status_code}, Response: {response.text}")
        
        return response.json()

    def login(self):
        payload = {
            "role_id": self.config['vault_service_id'],
            "secret_id": self.config['vault_secret']
        }
        response = self._send_request('approle/login', payload, "GES Authentication failed")
        return response['auth']['client_token']

def main():
    hvault_conf_path = '/path/to/your/hvault.conf'
    hvault_client = HVaultClient(hvault_conf_path)
    token = hvault_client.login()
    print(f"Token: {token}")

if __name__ == '__main__':
    main()
